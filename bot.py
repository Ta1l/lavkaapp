import logging
import asyncpg
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

API_TOKEN = "8457174750:AAHAz3tAjrUkEPZHX1mJvuDUJj7YkzbhlMM"

DB_CONFIG = {
    "user": "lavka_user",
    "password": "hw6uxxs9*Hz5",
    "database": "schedule_db",
    "host": "localhost",
    "port": 5432,
}

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# --- FSM (—Å–æ—Å—Ç–æ—è–Ω–∏—è) ---
class AuthState(StatesGroup):
    waiting_for_login = State()
    waiting_for_password = State()

class AddShiftState(StatesGroup):
    waiting_for_photos = State()

# --- DB ---
async def db_get_user(login: str, password: str):
    conn = await asyncpg.connect(**DB_CONFIG)
    row = await conn.fetchrow(
        "SELECT id FROM users WHERE username=$1 AND password=$2",
        login, password
    )
    await conn.close()
    return row["id"] if row else None

# --- START ---
@dp.message(Command("start"))
async def start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
    await state.set_state(AuthState.waiting_for_login)

# --- LOGIN ---
@dp.message(StateFilter(AuthState.waiting_for_login))
async def get_login(message: Message, state: FSMContext):
    await state.update_data(login=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await state.set_state(AuthState.waiting_for_password)

# --- PASSWORD ---
@dp.message(StateFilter(AuthState.waiting_for_password))
async def get_password(message: Message, state: FSMContext):
    data = await state.get_data()
    login = data.get("login")
    password = message.text.strip()

    user_id = await db_get_user(login, password)
    if user_id:
        await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {login}")
        await state.clear()
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /start")
        await state.clear()

# --- ADD SHIFTS ---
@dp.message(Command("add"))
async def add_shifts(message: Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–º–µ–Ω. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ /done")
    await state.set_state(AddShiftState.waiting_for_photos)

@dp.message(StateFilter(AddShiftState.waiting_for_photos), F.photo)
async def handle_photos(message: Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    data = await state.get_data()
    photos = data.get("photos", [])
    photos.append(file_id)
    await state.update_data(photos=photos)
    await message.answer("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω")

@dp.message(Command("done"), StateFilter(AddShiftState.waiting_for_photos))
async def confirm_slots(message: Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])

    if not photos:
        await message.answer("–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã")
        await state.clear()
        return

    # –¢—É—Ç –±—É–¥–µ—Ç OCR –∏ –ø–∞—Ä—Å–∏–Ω–≥ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
    await message.answer(f"üì∏ –ü–æ–ª—É—á–µ–Ω–æ {len(photos)} —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤.\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–º–µ–Ω? (yes/no)")

    await state.update_data(confirm=True)

@dp.message(StateFilter(AddShiftState.waiting_for_photos), F.text.lower() == "yes")
async def confirm_yes(message: Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    # –ó–∞–≥–ª—É—à–∫–∞ ‚Äî —Ç—É—Ç —Ç—ã –¥–æ–±–∞–≤–∏—à—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–ª–æ—Ç–æ–≤ –≤ –ë–î
    await message.answer(f"‚úÖ –°–º–µ–Ω—ã ({len(photos)} —à—Ç.) —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!")
    await state.clear()

@dp.message(StateFilter(AddShiftState.waiting_for_photos), F.text.lower() == "no")
async def confirm_no(message: Message, state: FSMContext):
    await message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
    await state.clear()

# --- MAIN ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())

# bot/bot.py
import logging
import asyncio
import aiohttp
import os
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

from ocr_module import SlotParser  # OCR –ø–∞—Ä—Å–µ—Ä

# === –ö–æ–Ω—Ñ–∏–≥ ===
API_TOKEN = "8457174750:AAHAz3tAjrUkEPZHX1mJvuDUJj7YkzbhlMM"
WEBAPP_URL = "https://slotworker.ru"   # ‚ö†Ô∏è –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ "/"
UPLOAD_DIR = "./user_uploads"

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())


# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
class AuthState(StatesGroup):
    waiting_for_login = State()
    waiting_for_password = State()


class SlotState(StatesGroup):
    waiting_for_screens = State()
    confirm_slots = State()


# === API –§—É–Ω–∫—Ü–∏–∏ ===
async def get_api_key(username: str, password: str) -> str | None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ API-–∫–ª—é—á–∞ –ø–æ –ª–æ–≥–∏–Ω—É/–ø–∞—Ä–æ–ª—é"""
    try:
        url = f"{WEBAPP_URL}/api/auth/get-token"
        logger.info(f"üîë –ó–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è {username} –Ω–∞ {url}")
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                url,
                json={"username": username, "password": password},
                headers={"Content-Type": "application/json"},
                timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                text = await response.text()
                logger.info(f"üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: status={response.status}, body={text[:200]}...")
                
                if response.status == 200:
                    try:
                        data = await response.json()
                        api_key = data.get("apiKey")
                        if api_key:
                            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω apiKey –¥–ª—è {username}: {api_key[:10]}...")
                            return api_key
                        else:
                            logger.error(f"‚ùå –í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç apiKey: {data}")
                            return None
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}, text={text}")
                        return None
                else:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ {response.status}: {text}")
                    return None
    except asyncio.TimeoutError:
        logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–æ–∫–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–æ–∫–µ–Ω–∞: {type(e).__name__}: {e}")
    return None


async def add_shift(api_key: str, date: str, start: str, end: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–æ—Ç–∞ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    try:
        url = f"{WEBAPP_URL}/api/shifts"
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
        payload = {
            "date": date,
            "startTime": start,
            "endTime": end,
            "assignToSelf": True
        }
        
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–æ—Ç–∞: {url}")
        logger.info(f"Headers: {headers}")
        logger.info(f"Payload: {payload}")
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                url,
                headers=headers,
                json=payload,
                timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                text = await response.text()
                logger.info(f"üì• –û—Ç–≤–µ—Ç: status={response.status}, body={text[:200]}...")
                
                if response.status in (200, 201):
                    logger.info(f"‚úÖ –°–ª–æ—Ç {date} {start}-{end} –¥–æ–±–∞–≤–ª–µ–Ω")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞ {response.status}: {text}")
                    return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞: {type(e).__name__}: {e}")
    return False


# === OCR –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ===
def extract_slots_from_user_dir(user_id: int, upload_dir: str):
    """–ó–∞–ø—É—Å–∫ OCR –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤"""
    user_dir = os.path.join(upload_dir, str(user_id))
    parser = SlotParser(base_path=user_dir)
    slots = parser.process_all_screenshots()

    result = []
    for s in slots:
        result.append({
            "date": s["date"],
            "start": s["start_time"],
            "end": s["end_time"],
            "status": s.get("status", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        })
    return result


# === –•—ç–Ω–¥–ª–µ—Ä—ã ===
@dp.message(Command("start"))
async def start_cmd(message: Message, state: FSMContext):
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
    await state.set_state(AuthState.waiting_for_login)


@dp.message(StateFilter(AuthState.waiting_for_login))
async def login_input(message: Message, state: FSMContext):
    await state.update_data(login=message.text.strip())
    await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await state.set_state(AuthState.waiting_for_password)


@dp.message(StateFilter(AuthState.waiting_for_password))
async def password_input(message: Message, state: FSMContext):
    data = await state.get_data()
    login = data.get("login")
    password = message.text.strip()

    await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –¥–∞–Ω–Ω—ã–µ...")
    
    api_key = await get_api_key(login, password)
    if api_key:
        await state.update_data(api_key=api_key)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
        check_data = await state.get_data()
        logger.info(f"üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω api_key –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {check_data.get('api_key', '–ù–ï–¢')[:10]}...")
        await message.answer("‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã.")
        await state.set_state(None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /start")
        await state.clear()


@dp.message(Command("add"))
async def start_adding(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    data = await state.get_data()
    if not data.get("api_key"):
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É: /start")
        return
    
    user_id = message.from_user.id
    user_dir = os.path.join(UPLOAD_DIR, str(user_id))
    os.makedirs(user_dir, exist_ok=True)

    await state.set_state(SlotState.waiting_for_screens)
    await message.answer("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –≤–≤–µ–¥–∏—Ç–µ /stop")


@dp.message(StateFilter(SlotState.waiting_for_screens), F.photo)
async def handle_screenshot(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_dir = os.path.join(UPLOAD_DIR, str(user_id))
    os.makedirs(user_dir, exist_ok=True)

    photo = message.photo[-1]
    file_path = os.path.join(user_dir, f"{photo.file_unique_id}.jpg")
    
    try:
        file = await bot.get_file(photo.file_id)
        await bot.download_file(file.file_path, file_path)
        await message.answer("‚úÖ –°–∫—Ä–∏–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        logger.info(f"üì∏ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç: {file_path}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞.")


@dp.message(Command("stop"), StateFilter(SlotState.waiting_for_screens))
async def stop_and_process(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_dir = os.path.join(UPLOAD_DIR, str(user_id))

    if not os.path.exists(user_dir) or not os.listdir(user_dir):
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —á–µ—Ä–µ–∑ /add")
        await state.set_state(None)
        return

    await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç—ã...")
    
    try:
        slots = extract_slots_from_user_dir(user_id, UPLOAD_DIR)
        if not slots:
            await message.answer("‚ùå –°–ª–æ—Ç—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.set_state(None)
            return

        await state.update_data(slots=slots)

        text = "üìä –ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Å–ª–æ—Ç—ã:\n\n"
        for i, s in enumerate(slots, 1):
            text += f"{i}. {s['date']} {s['start']}‚Äì{s['end']} ({s['status']})\n"

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", callback_data="confirm_yes"),
                 InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no")]
            ]
        )

        await message.answer(text, reply_markup=kb)
        await state.set_state(SlotState.confirm_slots)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤.")
        await state.set_state(None)


@dp.callback_query(StateFilter(SlotState.confirm_slots), F.data == "confirm_yes")
async def confirm_yes(call: CallbackQuery, state: FSMContext):
    await call.answer()
    
    data = await state.get_data()
    api_key = data.get("api_key")
    slots = data.get("slots", [])
    
    if not api_key:
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç API-–∫–ª—é—á–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start")
        await state.clear()
        return
    
    logger.info(f"üì§ –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É {len(slots)} —Å–ª–æ—Ç–æ–≤ —Å api_key: {api_key[:10]}...")
    
    await call.message.edit_text("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–ª–æ—Ç—ã...")
    
    ok_count = 0
    for s in slots:
        if await add_shift(api_key, s["date"], s["start"], s["end"]):
            ok_count += 1
        await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

    await call.message.answer(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {ok_count} –∏–∑ {len(slots)} —Å–ª–æ—Ç–æ–≤ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
    
    # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏
    user_id = call.from_user.id
    user_dir = os.path.join(UPLOAD_DIR, str(user_id))
    try:
        for file in os.listdir(user_dir):
            os.remove(os.path.join(user_dir, file))
        logger.info(f"üóëÔ∏è –û—á–∏—â–µ–Ω–∞ –ø–∞–ø–∫–∞ {user_dir}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–ø–∫–∏: {e}")
    
    await state.set_state(None)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º api_key, –Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


@dp.callback_query(StateFilter(SlotState.confirm_slots), F.data == "confirm_no")
async def confirm_no(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.edit_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /add")
    
    # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏
    user_id = call.from_user.id
    user_dir = os.path.join(UPLOAD_DIR, str(user_id))
    try:
        for file in os.listdir(user_dir):
            os.remove(os.path.join(user_dir, file))
        logger.info(f"üóëÔ∏è –û—á–∏—â–µ–Ω–∞ –ø–∞–ø–∫–∞ {user_dir}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–ø–∫–∏: {e}")
    
    await state.set_state(None)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º api_key, –Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


@dp.message(Command("status"))
async def check_status(message: Message, state: FSMContext):
    data = await state.get_data()
    api_key = data.get("api_key")
    
    if api_key:
        await message.answer(f"‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. API-–∫–ª—é—á: {api_key[:10]}...")
    else:
        await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—Ö–æ–¥–∞.")


@dp.message(Command("logout"))
async def logout(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –î–ª—è –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")


# === MAIN ===
async def main():
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
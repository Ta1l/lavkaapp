# bot/handlers/auth.py
import logging
from aiogram import types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram import Dispatcher

from .common import AuthState, user_storage, get_api_key

logger = logging.getLogger("lavka.handlers.auth")


def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    dp.message.register(start_cmd, Command("start"))
    dp.message.register(login_input, StateFilter(AuthState.waiting_for_login))
    dp.message.register(password_input, StateFilter(AuthState.waiting_for_password))
    dp.message.register(status_cmd, Command("status"))
    dp.message.register(logout_cmd, Command("logout"))
    dp.message.register(help_cmd, Command("help"))


async def start_cmd(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º."""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_storage.is_authenticated(user_id):
        await message.answer(
            "‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "‚Ä¢ /add - –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å–æ —Å–ª–æ—Ç–∞–º–∏\n"
            "‚Ä¢ /status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
            "‚Ä¢ /logout - –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n"
            "‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞"
        )
        return
    
    await state.set_state(AuthState.waiting_for_login)
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ—Ç–æ–≤!\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç —Å–∞–π—Ç–∞ slotworker.ru\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:"
    )


async def login_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞."""
    login = message.text.strip()
    
    if not login:
        await message.answer("‚ùå –õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(login=login)
    await state.set_state(AuthState.waiting_for_password)
    await message.answer("üîê –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")


async def password_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è."""
    data = await state.get_data()
    login = data.get("login")
    password = message.text.strip()
    
    if not login:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start")
        await state.clear()
        return
    
    if not password:
        await message.answer("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏
    msg = await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –¥–∞–Ω–Ω—ã–µ...")
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
    api_key = await get_api_key(login, password)
    
    if api_key:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º API –∫–ª—é—á
        user_storage.set_api_key(message.from_user.id, api_key)
        
        await msg.edit_text(
            "‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /add –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å–æ —Å–ª–æ—Ç–∞–º–∏\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏"
        )
        logger.info(f"User {login} (ID: {message.from_user.id}) logged in successfully")
    else:
        await msg.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞!\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è.\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Å–∞–π—Ç–µ slotworker.ru\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /start"
        )
        logger.warning(f"Failed login attempt for user {login}")

    await state.clear()


async def status_cmd(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /status - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
    user_id = message.from_user.id
    
    if user_storage.is_authenticated(user_id):
        screenshots_count = len(user_storage.get_screenshots(user_id))
        status_text = "‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ\n\n"
        
        if screenshots_count > 0:
            status_text += f"üì∑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: {screenshots_count}\n"
            status_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
        else:
            status_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ—Ç–æ–≤"
        
        await message.answer(status_text)
    else:
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É"
        )


async def logout_cmd(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /logout - –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã."""
    user_id = message.from_user.id
    
    if user_storage.is_authenticated(user_id):
        user_storage.logout(user_id)
        await message.answer(
            "üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n\n"
            "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
        )
        logger.info(f"User {user_id} logged out")
    else:
        await message.answer("–í—ã –Ω–µ –±—ã–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")
    
    await state.clear()


async def help_cmd(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É."""
    help_text = """
üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É / –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
‚Ä¢ /add - –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–æ —Å–ª–æ—Ç–∞–º–∏
‚Ä¢ /stop - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
‚Ä¢ /status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
‚Ä¢ /logout - –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ slotworker.ru
2. –í–æ–π–¥–∏—Ç–µ –≤ –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É—è /start
3. –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç —Å–∞–π—Ç–∞
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
5. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–æ —Å–ª–æ—Ç–∞–º–∏
6. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
7. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–ª–æ—Ç–æ–≤ –Ω–∞ —Å–∞–π—Ç

**–í–∞–∂–Ω–æ:**
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
‚Ä¢ –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∑–∞ —Ä–∞–∑
‚Ä¢ –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —É–¥–∞–ª—è—é—Ç—Å—è –∏–∑ –ø–∞–º—è—Ç–∏
"""
    await message.answer(help_text, parse_mode="Markdown")
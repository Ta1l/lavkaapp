# bot/handlers/slots.py
import logging
import asyncio
from io import BytesIO
from typing import List, Dict, Any

from aiogram import types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram import Dispatcher, Bot

from .common import SlotState, user_storage, format_slots_text, add_shift
from ..ocr_module import SlotParser, MemorySlotParser  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç MemorySlotParser

logger = logging.getLogger("lavka.handlers.slots")


def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ª–æ—Ç–∞–º–∏."""
    dp.message.register(cmd_add, Command("add"))
    dp.message.register(handle_screenshot, StateFilter(SlotState.waiting_for_screens), F.photo)
    dp.message.register(cmd_stop, Command("stop"), StateFilter(SlotState.waiting_for_screens))
    dp.callback_query.register(confirm_yes, StateFilter(SlotState.confirm_slots), F.data == "confirm_yes")
    dp.callback_query.register(confirm_no, StateFilter(SlotState.confirm_slots), F.data == "confirm_no")


async def cmd_add(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /add - –Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤."""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not user_storage.is_authenticated(user_id):
        await message.answer(
            "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É"
        )
        return
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
    user_storage.clear_screenshots(user_id)
    
    await state.set_state(SlotState.waiting_for_screens)
    await message.answer(
                "üì∑ **–†–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–æ —Å–ª–æ—Ç–∞–º–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ).\n"
        "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop\n\n"
        "‚ùó –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã",
        parse_mode="Markdown"
    )
    logger.info(f"User {user_id} started uploading screenshots")


async def handle_screenshot(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞."""
    user_id = message.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        file = await bot.get_file(photo.file_id)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –ø–∞–º—è—Ç—å
        bio = BytesIO()
        await bot.download_file(file.file_path, bio)
        bio.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_storage.add_screenshot(user_id, bio)
        
        count = len(user_storage.get_screenshots(user_id))
        await message.answer(
            f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç #{count} —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
        )
        logger.info(f"Screenshot saved for user {user_id}, total: {count}")
        
    except Exception as e:
        logger.exception(f"Error saving screenshot for user {user_id}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


async def cmd_stop(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /stop - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤."""
    user_id = message.from_user.id
    screenshots = user_storage.get_screenshots(user_id)
    
    if not screenshots:
        await message.answer(
            "‚ö†Ô∏è –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã, –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop"
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer(
        f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(screenshots)} —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤...\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"
    )
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑ –ø–∞–º—è—Ç–∏
        parser = MemorySlotParser()
        all_slots = []
        cancelled_count = 0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
        for idx, bio in enumerate(screenshots):
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
                if idx > 0 and idx % 2 == 0:
                    await processing_msg.edit_text(
                        f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç—ã...\n"
                        f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {idx + 1}/{len(screenshots)}"
                    )
                
                bio.seek(0)  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —á–∏—Ç–∞–µ–º —Å –Ω–∞—á–∞–ª–∞
                slots = parser.process_screenshot_from_memory(bio, is_last=(idx == len(screenshots) - 1))
                all_slots.extend(slots)
                cancelled_count += parser.cancelled_count
                
            except Exception as e:
                logger.error(f"Error processing screenshot {idx + 1}: {e}")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã
        unique_slots = []
        seen = set()
        for slot in all_slots:
            key = (slot["date"], slot["startTime"], slot["endTime"])
            if key not in seen:
                seen.add(key)
                unique_slots.append(slot)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
        unique_slots.sort(key=lambda s: (s["date"], s["startTime"]))
        
        if not unique_slots:
            await processing_msg.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ª–æ—Ç—ã\n\n"
                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: {len(screenshots)}\n"
                f"–û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {cancelled_count}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã"
            )
            user_storage.clear_screenshots(user_id)
            await state.clear()
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result_text = format_slots_text(unique_slots)
        if cancelled_count > 0:
            result_text += f"\n\n‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {cancelled_count}"
        
        # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–∞–π—Ç", callback_data="confirm_yes"),
                types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no")
            ]
        ])
        
        await processing_msg.edit_text(result_text, reply_markup=keyboard)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        await state.update_data(slots=unique_slots)
        await state.set_state(SlotState.confirm_slots)
        
    except Exception as e:
        logger.exception(f"Error processing screenshots for user {user_id}: {e}")
        await processing_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
        )
        user_storage.clear_screenshots(user_id)
        await state.clear()


async def confirm_yes(call: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–æ—Ç–æ–≤ –Ω–∞ —Å–∞–π—Ç."""
    await call.answer()
    user_id = call.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    slots = data.get("slots", [])
    api_key = user_storage.get_api_key(user_id)
    
    if not api_key:
        await call.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞"
        )
        await state.clear()
        return
    
    if not slots:
        await call.message.edit_text("‚ùå –ù–µ—Ç —Å–ª–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        await state.clear()
        return
    
    # –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
    await call.message.edit_text(
        "üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–ª–æ—Ç—ã –Ω–∞ —Å–∞–π—Ç...\n"
        f"–í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤: {len(slots)}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–æ—Ç—ã
    success_count = 0
    failed_count = 0
    
    for i, slot in enumerate(slots):
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–æ—Ç
            success = await add_shift(
                api_key,
                slot["date"],
                slot["startTime"],
                slot["endTime"]
            )
            
            if success:
                success_count += 1
            else:
                failed_count += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 3 —Å–ª–æ—Ç–∞
            if (i + 1) % 3 == 0 or (i + 1) == len(slots):
                progress = (i + 1) / len(slots) * 100
                await call.message.edit_text(
                    f"üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–æ—Ç–æ–≤...\n\n"
                    f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.0f}%\n"
                    f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {i + 1}/{len(slots)}"
                )
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await asyncio.sleep(0.3)
            
        except Exception as e:
            logger.error(f"Error sending slot: {e}")
            failed_count += 1
    
    # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    result_message = "‚úÖ **–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
    result_message += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
    result_message += f"‚Ä¢ –í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤: {len(slots)}\n"
    result_message += f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
    
    if failed_count > 0:
        result_message += f"‚Ä¢ –û—à–∏–±–æ–∫: {failed_count}\n"
    
    result_message += f"\n‚ú® –°–ª–æ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–∞–π—Ç slotworker.ru"
    
    await call.message.edit_text(result_message, parse_mode="Markdown")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    user_storage.clear_screenshots(user_id)
    await state.clear()
    
    logger.info(f"User {user_id} uploaded {success_count}/{len(slots)} slots")


async def confirm_no(call: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–æ—Ç–æ–≤."""
    await call.answer()
    user_id = call.from_user.id
    
    await call.message.edit_text(
        "‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n"
        "–°–∫—Ä–∏–Ω—à–æ—Ç—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ø–∞–º—è—Ç–∏.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏"
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    user_storage.clear_screenshots(user_id)
    await state.clear()
    
    logger.info(f"User {user_id} cancelled slot upload")
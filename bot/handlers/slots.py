# bot/handlers/slots.py
import logging
import os
from typing import List, Dict, Any

from aiogram import types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram import Dispatcher, Bot

from .common import SlotState, get_user_dir, format_slots_text, USER_API_KEYS, add_shift
# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –ø–∞—Ä—Å–µ—Ä–∞ OCR ‚Äî –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –º–æ–¥—É–ª—å ocr_module.py –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
from ocr_module import SlotParser

logger = logging.getLogger("lavka.handlers.slots")


def register_handlers(dp: Dispatcher):
    dp.message.register(cmd_add, Command("add"))
    # –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ñ–æ—Ç–æ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω–æ–≤
    dp.message.register(handle_screenshot, StateFilter(SlotState.waiting_for_screens), F.photo)
    dp.message.register(cmd_stop, Command("stop"), StateFilter(SlotState.waiting_for_screens))
    dp.callback_query.register(confirm_yes, StateFilter(SlotState.confirm_slots), F.data == "confirm_yes")
    dp.callback_query.register(confirm_no, StateFilter(SlotState.confirm_slots), F.data == "confirm_no")


# --- Handlers ---
async def cmd_add(message: types.Message, state: FSMContext):
    """
    /add ‚Äî –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º –ø—Ä–∏—ë–º–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤.
    """
    user_dir = get_user_dir(message.from_user.id)
    await state.set_state(SlotState.waiting_for_screens)
    await message.answer(
        "–†–µ–∂–∏–º –ø—Ä–∏—ë–º–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –≤–∫–ª—é—á—ë–Ω.\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –≤–≤–µ–¥–∏—Ç–µ /stop"
    )
    logger.debug("User %s starts uploading screenshots into %s", message.from_user.id, user_dir)


async def handle_screenshot(message: types.Message, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò–º—è ‚Äî file_unique_id.jpg
    """
    user_id = message.from_user.id
    user_dir = get_user_dir(user_id)

    # –ë–µ—Ä—ë–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä (–ø–æ—Å–ª–µ–¥–Ω–∏–π –≤ —Å–ø–∏—Å–∫–µ photo)
    photo = message.photo[-1]
    filename = f"{photo.file_unique_id}.jpg"
    file_path = os.path.join(user_dir, filename)

    try:
        await photo.download(destination_file=file_path)
        await message.answer("‚úÖ –°–∫—Ä–∏–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        logger.info("Saved screenshot for user %s -> %s", user_id, file_path)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: %s", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–Ω–∞.")


async def cmd_stop(message: types.Message, state: FSMContext):
    """
    /stop ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏—ë–º, –∑–∞–ø—É—Å–∫–∞–µ–º OCR –ø–æ –ø–∞–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å.
    """
    user_id = message.from_user.id
    user_dir = get_user_dir(user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤
    files = [f for f in os.listdir(user_dir) if f.lower().endswith((".png", ".jpg", ".jpeg"))]
    if not files:
        await message.answer("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω–æ–≤. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–æ–º–∞–Ω–¥–æ–π /add.")
        await state.clear()
        return

    await message.answer("üîé –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∫—Ä–∏–Ω–æ–≤... –ñ–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥.")
    try:
        parser = SlotParser(base_path=user_dir)
        raw_slots = parser.process_all_screenshots()
    except Exception as e:
        logger.exception("OCR error for user %s: %s", user_id, e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å–∫—Ä–∏–Ω–æ–≤.")
        await state.clear()
        return

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç —Å–ª–æ—Ç–æ–≤ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–π)
    slots: List[Dict[str, Any]] = []
    for s in raw_slots:
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ö–µ–º –∫–ª—é—á–µ–π: prefer startTime/endTime, –Ω–æ –º–æ–∂–Ω–æ –∏ start_time/start/end
        date = s.get("date")
        start = s.get("startTime") or s.get("start_time") or s.get("start")
        end = s.get("endTime") or s.get("end_time") or s.get("end")
        if date and start and end:
            slots.append({
                "date": date,
                "startTime": start,
                "endTime": end,
                "assignToSelf": True
            })

    if not slots:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–ª–æ—Ç—ã –Ω–∞ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–∞—Ö.")
        await state.clear()
        return

    text = format_slots_text(slots)
    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", callback_data="confirm_yes"),
         types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no")]
    ])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –≤ state
    await state.update_data(slots=slots)
    await message.answer(text, reply_markup=keyboard)
    await state.set_state(SlotState.confirm_slots)


async def confirm_yes(call: types.CallbackQuery, state: FSMContext):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª ‚Äî –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–≥—Ä—É–∂–∞—Ç—å –≤ –≤–µ–±. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–≥—Ä—É–∑–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.
    –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å: –∑–∞–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è ENABLE_UPLOAD=1 –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
    """
    await call.answer()  # —É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —É –∫–ª–∏–µ–Ω—Ç–∞
    data = await state.get_data()
    slots = data.get("slots", [])
    user_id = call.from_user.id
    api_key = USER_API_KEYS.get(user_id)

    if not slots:
        await call.message.answer("–ù–µ—Ç —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
        await state.clear()
        return

    if not api_key:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω ‚Äî –ø–æ—è—Å–Ω—è–µ–º
        await call.message.answer("‚ö†Ô∏è –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É (–Ω–µ—Ç api_key). –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start –∏ –≤–æ–π–¥–∏—Ç–µ.")
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ENV ‚Äî –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É; –∏–Ω–∞—á–µ —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
    import os
    if os.getenv("ENABLE_UPLOAD", "0") != "1":
        await call.message.answer(
            "‚ÑπÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–µ–π—á–∞—Å –æ—Ç–∫–ª—é—á–µ–Ω–∞ (—Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏).\n"
            "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –≤—ã–≥—Ä—É–∑–∫—É ‚Äî –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è ENABLE_UPLOAD=1 –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞."
        )
        await state.clear()
        return

    # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ ‚Äî –≤—ã–≥—Ä—É–∂–∞–µ–º
    ok = 0
    total = len(slots)
    for s in slots:
        success = await add_shift(api_key, s["date"], s["startTime"], s["endTime"])
        if success:
            ok += 1

    await call.message.answer(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ. –ó–∞–≥—Ä—É–∂–µ–Ω–æ {ok}/{total} —Å–ª–æ—Ç–æ–≤.")
    await state.clear()


async def confirm_no(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /add")
    await state.clear()

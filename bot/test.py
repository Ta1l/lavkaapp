# test_ocr_module.py
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç-—Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã OCR –º–æ–¥—É–ª—è –Ω–∞ 4 —Å–∫—Ä–∏–Ω—à–æ—Ç–∞—Ö
"""

import os
import sys
import json
import logging
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
sys.path.insert(0, r'C:\lavka\lavka')

# –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –∫ Tesseract –î–û –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è
import pytesseract
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º OCR –º–æ–¥—É–ª—å
from ocr_module import NewFormatSlotParser, SlotParser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TEST_IMAGES_PATH = r"C:\lavka\lavka\test_images"
TEST_FILES = ["1.jpg", "2.jpg", "3.jpg", "4.jpg"]

class OCRModuleTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OCR –º–æ–¥—É–ª—è"""
    
    def __init__(self, test_path: str, debug: bool = False):
        self.test_path = test_path
        self.debug = debug
        self.parser = NewFormatSlotParser(debug=debug)
        self.results = {}
        self.statistics = {
            "total_images": 0,
            "successful": 0,
            "failed": 0,
            "total_slots": 0,
            "images_with_day": 0,
            "images_with_slots": 0
        }
    
    def test_single_image(self, image_path: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        
        filename = os.path.basename(image_path)
        logger.info(f"\n{'='*60}")
        logger.info(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {filename}")
        logger.info(f"{'='*60}")
        
        result = {
            "filename": filename,
            "path": image_path,
            "success": False,
            "day_extracted": None,
            "slots_found": [],
            "error": None,
            "processing_time": None
        }
        
        if not os.path.exists(image_path):
            result["error"] = f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}"
            logger.error(result["error"])
            return result
        
        try:
            start_time = datetime.now()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            slots = self.parser.process_image(image_path)
            
            processing_time = (datetime.now() - start_time).total_seconds()
            result["processing_time"] = processing_time
            
            if slots:
                result["success"] = True
                result["slots_found"] = slots
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–Ω—å –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ—Ç–∞
                if slots and len(slots) > 0:
                    date_str = slots[0].get("date", "")
                    if date_str:
                        try:
                            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤–∏–¥–∞ "2025-10-14"
                            day = int(date_str.split("-")[2])
                            result["day_extracted"] = day
                        except:
                            pass
                
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                logger.info(f"üìÖ –î–µ–Ω—å: {result['day_extracted']}")
                logger.info(f"‚è∞ –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ—Ç–æ–≤: {len(slots)}")
                logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫")
                
                # –í—ã–≤–æ–¥–∏–º —Å–ª–æ—Ç—ã
                for i, slot in enumerate(slots, 1):
                    logger.info(f"  –°–ª–æ—Ç {i}: {slot['startTime']} - {slot['endTime']} ({slot['date']})")
            else:
                result["error"] = "–°–ª–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                logger.warning("‚ö†Ô∏è –°–ª–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫")
                
        except Exception as e:
            result["error"] = str(e)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            
        return result
    
    def test_all_images(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        
        logger.info("\n" + "="*60)
        logger.info("–ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø OCR –ú–û–î–£–õ–Ø")
        logger.info("="*60)
        
        all_results = []
        
        for filename in TEST_FILES:
            image_path = os.path.join(self.test_path, filename)
            result = self.test_single_image(image_path)
            all_results.append(result)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.statistics["total_images"] += 1
            
            if result["success"]:
                self.statistics["successful"] += 1
                
                if result["day_extracted"]:
                    self.statistics["images_with_day"] += 1
                
                if result["slots_found"]:
                    self.statistics["images_with_slots"] += 1
                    self.statistics["total_slots"] += len(result["slots_found"])
            else:
                self.statistics["failed"] += 1
        
        return {
            "test_time": datetime.now().isoformat(),
            "results": all_results,
            "statistics": self.statistics
        }
    
    def print_summary(self, test_results: Dict[str, Any]):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        
        stats = test_results["statistics"]
        
        logger.info("\n" + "="*60)
        logger.info("–ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        logger.info("="*60)
        
        logger.info(f"üìä –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {stats['total_images']}")
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['successful']}")
        logger.info(f"‚ùå –û—à–∏–±–æ–∫: {stats['failed']}")
        logger.info(f"üìÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –¥–Ω–µ–º: {stats['images_with_day']}")
        logger.info(f"‚è∞ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ —Å–ª–æ—Ç–∞–º–∏: {stats['images_with_slots']}")
        logger.info(f"üìã –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å–ª–æ—Ç–æ–≤: {stats['total_slots']}")
        
        success_rate = (stats['successful'] / stats['total_images'] * 100) if stats['total_images'] > 0 else 0
        logger.info(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É –ø–æ –¥–Ω—è–º
        logger.info("\n" + "="*60)
        logger.info("–°–í–û–î–ö–ê –ü–û –î–ù–Ø–ú")
        logger.info("="*60)
        
        for result in test_results["results"]:
            if result["day_extracted"]:
                slots_count = len(result["slots_found"])
                logger.info(f"üìÖ {result['filename']}: –î–µ–Ω—å {result['day_extracted']}, —Å–ª–æ—Ç–æ–≤: {slots_count}")
                if result["slots_found"]:
                    for slot in result["slots_found"]:
                        logger.info(f"   ‚Ä¢ {slot['startTime']} - {slot['endTime']}")
            else:
                logger.info(f"‚ùå {result['filename']}: –î–µ–Ω—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
    
    def export_json(self, test_results: Dict[str, Any], output_file: str = "test_results.json"):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON"""
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è JSON (—É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–µ–µ)
        json_data = {
            "test_date": test_results["test_time"],
            "statistics": test_results["statistics"],
            "images": []
        }
        
        for result in test_results["results"]:
            image_data = {
                "filename": result["filename"],
                "day": result["day_extracted"],
                "slots": []
            }
            
            if result["slots_found"]:
                for slot in result["slots_found"]:
                    image_data["slots"].append({
                        "date": slot["date"],
                        "startTime": slot["startTime"],
                        "endTime": slot["endTime"]
                    })
            
            json_data["images"].append(image_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        output_path = os.path.join(self.test_path, output_file)
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(json_data, f, ensure_ascii=False, indent=2)
        
        logger.info(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_path}")
        
        # –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º JSON –≤ –∫–æ–Ω—Å–æ–ª—å
        logger.info("\n" + "="*60)
        logger.info("JSON –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        logger.info("="*60)
        print(json.dumps(json_data, ensure_ascii=False, indent=2))
        
        return json_data

def test_batch_processing():
    """–¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ SlotParser"""
    
    logger.info("\n" + "="*60)
    logger.info("–¢–ï–°–¢ –ü–ê–ö–ï–¢–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò (SlotParser)")
    logger.info("="*60)
    
    parser = SlotParser(TEST_IMAGES_PATH, debug=False)
    slots = parser.process_all_screenshots()
    
    if slots:
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(slots)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
        slots_by_date = {}
        for slot in slots:
            date = slot["date"]
            if date not in slots_by_date:
                slots_by_date[date] = []
            slots_by_date[date].append(slot)
        
        logger.info(f"üìÖ –ù–∞–π–¥–µ–Ω–æ {len(slots_by_date)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–Ω–µ–π")
        
        # –í—ã–≤–æ–¥–∏–º –ø–æ –¥–∞—Ç–∞–º
        for date in sorted(slots_by_date.keys()):
            day_slots = slots_by_date[date]
            day = int(date.split("-")[2])
            logger.info(f"\n–î–µ–Ω—å {day} ({date}):")
            for slot in day_slots:
                logger.info(f"  ‚Ä¢ {slot['startTime']} - {slot['endTime']}")
        
        return slots
    else:
        logger.warning("‚ö†Ô∏è –°–ª–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return []

def check_tesseract():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Tesseract"""
    try:
        import pytesseract
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –∫ Tesseract
        pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç
        version = pytesseract.get_tesseract_version()
        logger.info(f"‚úÖ Tesseract –¥–æ—Å—Ç—É–ø–µ–Ω")
        logger.info(f"   –ü—É—Ç—å: {pytesseract.pytesseract.tesseract_cmd}")
        logger.info(f"   –í–µ—Ä—Å–∏—è: {version}")
        return True
    except Exception as e:
        logger.error(f"‚ùå Tesseract –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        logger.error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Tesseract OCR –¥–ª—è Windows:")
        logger.error("1. –°–∫–∞—á–∞–π—Ç–µ —Å: https://github.com/UB-Mannheim/tesseract/wiki")
        logger.error("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ C:\\Program Files\\Tesseract-OCR\\")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("\n" + "="*60)
    print("OCR MODULE TESTER v1.0")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Tesseract
    if not check_tesseract():
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Tesseract –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∏ –ø—É—Ç—å.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if not os.path.exists(TEST_IMAGES_PATH):
        logger.error(f"‚ùå –ü–∞–ø–∫–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {TEST_IMAGES_PATH}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
    missing_files = []
    for filename in TEST_FILES:
        path = os.path.join(TEST_IMAGES_PATH, filename)
        if not os.path.exists(path):
            missing_files.append(filename)
    
    if missing_files:
        logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        return
    
    logger.info(f"üìÅ –ü–∞–ø–∫–∞ —Å —Ç–µ—Å—Ç–∞–º–∏: {TEST_IMAGES_PATH}")
    logger.info(f"üì∑ –§–∞–π–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {', '.join(TEST_FILES)}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    tester = OCRModuleTester(TEST_IMAGES_PATH, debug=False)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_results = tester.test_all_images()
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    tester.print_summary(test_results)
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
    json_data = tester.export_json(test_results)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    print("\n")
    batch_slots = test_batch_processing()
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info("\n" + "="*60)
    logger.info("–°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    logger.info("="*60)
    
    individual_slots = sum(len(r["slots_found"]) for r in test_results["results"])
    batch_slots_count = len(batch_slots)
    
    logger.info(f"–°–ª–æ—Ç–æ–≤ –ø—Ä–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ: {individual_slots}")
    logger.info(f"–°–ª–æ—Ç–æ–≤ –ø—Ä–∏ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ: {batch_slots_count}")
    
    if individual_slots == batch_slots_count:
        logger.info("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç")
    else:
        logger.warning("‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è")
    
    print("\n" + "="*60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("="*60)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if test_results["statistics"]["successful"] == 0:
        print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–∏ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("1. –ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        print("2. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        print("3. –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ OCR")

if __name__ == "__main__":
    main()
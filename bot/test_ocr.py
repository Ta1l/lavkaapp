# test_ocr_debug_fixed.py
# -*- coding: utf-8 -*-
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ OCR —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–µ–≥–∏–æ–Ω–æ–≤
"""

import os
import sys
import re
import json
from pathlib import Path
from datetime import date
from typing import List, Dict, Optional, Tuple

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from ocr_module import NewFormatSlotParser
import cv2
import pytesseract
from PIL import Image
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Tesseract –¥–ª—è Windows
if os.name == 'nt':
    pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –¥–∞—Ç—ã
FIXED_YEAR = 2025
FIXED_MONTH = 10


def find_time_slots(text: str) -> List[Tuple[str, str]]:
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ"""
    slots = []
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    text = text.replace('\n', ' ').replace('\r', ' ')
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    time_patterns = [
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å –¥–≤–æ–µ—Ç–æ—á–∏–µ–º
        r'(\d{1,2}):(\d{2})\s*[-‚Äì‚Äî]\s*(\d{1,2}):(\d{2})',
        # –° —Ç–æ—á–∫–æ–π
        r'(\d{1,2})\.(\d{2})\s*[-‚Äì‚Äî]\s*(\d{1,2})\.(\d{2})',
        # –° –ø—Ä–æ–±–µ–ª–æ–º
        r'(\d{1,2})\s+(\d{2})\s*[-‚Äì‚Äî]\s*(\d{1,2})\s+(\d{2})',
        # –°–ª–∏—Ç–Ω–æ (0800-1300)
        r'(\d{2})(\d{2})\s*[-‚Äì‚Äî]\s*(\d{2})(\d{2})',
    ]
    
    for pattern in time_patterns:
        matches = re.findall(pattern, text, re.IGNORECASE)
        for match in matches:
            try:
                if len(match) == 4:
                    h1, m1, h2, m2 = match
                    h1, m1, h2, m2 = int(h1), int(m1), int(h2), int(m2)
                    
                    if 0 <= h1 < 24 and 0 <= m1 < 60 and 0 <= h2 < 24 and 0 <= m2 < 60:
                        start_time = f"{h1:02d}:{m1:02d}"
                        end_time = f"{h2:02d}:{m2:02d}"
                        if (start_time, end_time) not in slots:
                            slots.append((start_time, end_time))
            except:
                continue
    
    return slots


def extract_day_simple(img: np.ndarray) -> Optional[int]:
    """–ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–Ω—è –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        # –ë–µ—Ä–µ–º –≤–µ—Ä—Ö–Ω—é—é —á–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        h = img.shape[0]
        top_part = img[:h//3, :]
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL
        pil_img = Image.fromarray(cv2.cvtColor(top_part, cv2.COLOR_BGR2RGB))
        
        # OCR
        text = pytesseract.image_to_string(pil_img, lang='eng+rus')
        
        # –ò—â–µ–º —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 31
        numbers = re.findall(r'\b(\d{1,2})\b', text)
        for num_str in numbers:
            num = int(num_str)
            if 1 <= num <= 31:
                return num
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–Ω—è: {e}")
    
    return None


def analyze_image_for_slots(image_path: str) -> List[Dict]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ—Ç—ã –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ"""
    print(f"\n{'='*60}")
    print(f"üîç –ê–ù–ê–õ–ò–ó –°–õ–û–¢–û–í: {os.path.basename(image_path)}")
    print(f"{'='*60}")
    
    # –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img = cv2.imread(image_path)
    if img is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        return []
    
    print(f"üìê –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img.shape[1]}x{img.shape[0]}")
    
    # 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–Ω—å (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
    day = extract_day_simple(img)
    if day is None:
        # –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å
        try:
            parser = NewFormatSlotParser(debug=False)
            day = parser._ocr_day_fallback_topstrip(img)
        except:
            pass
    
    if day is None:
        print("‚ö†Ô∏è –î–µ–Ω—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–Ω—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1")
        day = 1
    else:
        print(f"‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –¥–µ–Ω—å: {day}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É
    try:
        slot_date = date(FIXED_YEAR, FIXED_MONTH, day)
        iso_date = slot_date.isoformat()
        print(f"üìÖ –î–∞—Ç–∞: {iso_date}")
    except:
        print("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã")
        return []
    
    # 2. –ò—â–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
    all_slots = []
    seen_slots = set()
    
    # –°–ø–æ—Å–æ–± 1: –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    print("\nüìù –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...")
    pil_img = Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
    text_simple = pytesseract.image_to_string(pil_img, lang='eng+rus')
    
    print("–ù–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
    print(text_simple[:500])
    
    # –ò—â–µ–º —Å–ª–æ—Ç—ã
    slots = find_time_slots(text_simple)
    print(f"\n–ù–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤: {len(slots)}")
    
    for start, end in slots:
        key = (start, end)
        if key not in seen_slots:
            seen_slots.add(key)
            all_slots.append({
                "date": iso_date,
                "startTime": start,
                "endTime": end,
                "assignToSelf": True
            })
            print(f"  ‚Ä¢ {start} - {end}")
    
    # –°–ø–æ—Å–æ–± 2: –° –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    print("\nüìù –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–æ–π...")
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    
    # CLAHE –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
    enhanced = clahe.apply(gray)
    
    # –ë–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è
    _, binary = cv2.threshold(enhanced, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    
    binary_pil = Image.fromarray(binary)
    text_processed = pytesseract.image_to_string(binary_pil, lang='eng+rus')
    
    slots = find_time_slots(text_processed)
    print(f"–ù–∞–π–¥–µ–Ω–æ —Å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–æ–π: {len(slots)}")
    
    for start, end in slots:
        key = (start, end)
        if key not in seen_slots:
            seen_slots.add(key)
            all_slots.append({
                "date": iso_date,
                "startTime": start,
                "endTime": end,
                "assignToSelf": True
            })
            print(f"  ‚Ä¢ {start} - {end}")
    
    # –°–ø–æ—Å–æ–± 3: –ü–æ –æ–±–ª–∞—Å—Ç—è–º (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π)
    print("\nüìù –ê–Ω–∞–ª–∏–∑ –ø–æ –æ–±–ª–∞—Å—Ç—è–º...")
    h, w = img.shape[:2]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã
    regions = [
        ("–¶–µ–Ω—Ç—Ä", 0, h//3, w, 2*h//3),
        ("–ù–∏–∑", 0, 2*h//3, w, h),
    ]
    
    for name, x1, y1, x2, y2 in regions:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
        x1 = max(0, min(x1, w-1))
        x2 = max(x1+1, min(x2, w))
        y1 = max(0, min(y1, h-1))
        y2 = max(y1+1, min(y2, h))
        
        if x2 > x1 and y2 > y1:
            roi = img[y1:y2, x1:x2]
            
            if roi.size > 0:
                try:
                    roi_pil = Image.fromarray(cv2.cvtColor(roi, cv2.COLOR_BGR2RGB))
                    text_roi = pytesseract.image_to_string(roi_pil, lang='eng+rus')
                    
                    slots = find_time_slots(text_roi)
                    if slots:
                        print(f"  –í –æ–±–ª–∞—Å—Ç–∏ '{name}' –Ω–∞–π–¥–µ–Ω–æ: {len(slots)}")
                        
                    for start, end in slots:
                        key = (start, end)
                        if key not in seen_slots:
                            seen_slots.add(key)
                            all_slots.append({
                                "date": iso_date,
                                "startTime": start,
                                "endTime": end,
                                "assignToSelf": True
                            })
                            print(f"    ‚Ä¢ {start} - {end}")
                except Exception as e:
                    print(f"  –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–ª–∞—Å—Ç–∏ '{name}': {e}")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
    all_slots.sort(key=lambda x: x["startTime"])
    
    print(f"\nüìä –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {len(all_slots)}")
    
    return all_slots


def analyze_text_patterns(image_path: str):
    """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    print(f"\n{'='*60}")
    print(f"üîç –ü–û–ò–°–ö –í–†–ï–ú–ï–ù–ù–´–• –ü–ê–¢–¢–ï–†–ù–û–í")
    print(f"{'='*60}")
    
    img = cv2.imread(image_path)
    if img is None:
        return
    
    pil_img = Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
    text = pytesseract.image_to_string(pil_img, lang='eng+rus')
    
    print("\nüìù –ß–ò–°–õ–û–í–´–ï –ü–ê–¢–¢–ï–†–ù–´ –í –¢–ï–ö–°–¢–ï:")
    print("-" * 40)
    
    # –†–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    patterns = {
        "XX:XX": r'\d{1,2}:\d{2}',
        "XX.XX": r'\d{1,2}\.\d{2}',
        "XX XX": r'\d{1,2}\s+\d{2}',
        "XXXX": r'\b\d{4}\b',
        "XX-XX": r'\d{1,2}-\d{2}',
        "XX,XX": r'\d{1,2},\d{2}',
    }
    
    for name, pattern in patterns.items():
        matches = re.findall(pattern, text)
        if matches:
            print(f"{name}: {matches[:10]}")  # –ø–µ—Ä–≤—ã–µ 10
    
    # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫ —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —á–∏—Å–ª–∞ –∏ —Ç–∏—Ä–µ
    print("\nüìù –°–¢–†–û–ö–ò –° –ß–ò–°–õ–ê–ú–ò –ò –†–ê–ó–î–ï–õ–ò–¢–ï–õ–Ø–ú–ò:")
    print("-" * 40)
    
    lines = text.split('\n')
    for line in lines:
        # –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –µ—Å—Ç—å —á–∏—Å–ª–∞ –∏ –∫–∞–∫–æ–π-—Ç–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        if re.search(r'\d', line) and any(sep in line for sep in ['-', '‚Äì', '‚Äî', ':', '.', ',']):
            print(f"  {line[:100]}")  # –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ —Å—Ç—Ä–æ–∫–∏


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê OCR –° JSON –í–´–í–û–î–û–ú (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø)")
    
    # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    test_image = r"C:\lavka\lavka\test_images\photo_2025-10-11_14-36-35.jpg"
    
    if not os.path.exists(test_image):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_image}")
        print("–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é:")
        test_image = input("> ").strip()
    
    if os.path.exists(test_image):
        # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        analyze_text_patterns(test_image)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ —Å–ª–æ—Ç–æ–≤
        slots = analyze_image_for_slots(test_image)
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ JSON
        print(f"\n{'='*60}")
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –í JSON –§–û–†–ú–ê–¢–ï:")
        print(f"{'='*60}")
        
        if slots:
            print(json.dumps(slots, ensure_ascii=False, indent=2))
        else:
            print("[]")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        output_dir = Path("ocr_debug_output")
        output_dir.mkdir(exist_ok=True)
        
        output_file = output_dir / "slots.json"
        with open(output_file, "w", encoding="utf-8") as f:
            json.dump(slots, f, ensure_ascii=False, indent=2)
        
        print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file.absolute()}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        img = cv2.imread(test_image)
        pil_img = Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
        full_text = pytesseract.image_to_string(pil_img, lang='eng+rus')
        
        with open(output_dir / "full_text.txt", "w", encoding="utf-8") as f:
            f.write(full_text)
        
        print(f"‚úÖ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_dir / 'full_text.txt'}")
        
    else:
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_image}")


if __name__ == "__main__":
    main()
// src/app/schedule/[offset]/page.tsx

"use client";

import React, { useEffect, useState } from "react";
import { format } from "date-fns";
import { autoLogin } from "@/utils/autoLogin";
import ScheduleClientComponent from "@/components/ScheduleClientComponent";
import type { Day, ShiftStatus, TimeSlot, User } from "@/types/shifts";
import { getCalendarWeeks } from "@/lib/dateUtils";

interface Props {
  params: { offset: string };
  searchParams?: { userId?: string; start?: string; end?: string };
}

export default function SchedulePage({ params, searchParams }: Props) {
  const offset = Number(params.offset ?? 0);
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º userId –≤ —á–∏—Å–ª–æ —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—É—Ç–∞–Ω–∏—Ü—ã
  const viewedUserId = searchParams?.userId ? Number(searchParams.userId) : null;

  const [apiKey, setApiKey] = useState<string | null>(null);
  const [currentUser, setCurrentUser] = useState<User | null>(null);
  const [weekDays, setWeekDays] = useState<Day[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    async function init() {
      try {
        const key = await autoLogin();
        if (key) {
          setApiKey(key);
          console.log("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram —É—Å–ø–µ—à–Ω–∞");

          const res = await fetch("/api/auth/me", {
            headers: { Authorization: `Bearer ${key}` },
          });
          if (res.ok) {
            const user = await res.json();
            setCurrentUser(user);
            console.log("‚úÖ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", user);
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            await loadSchedule(key, user); 
          } else {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            await loadSchedule(key, null);
          }
        } else {
          console.log("‚ùå –ê–≤—Ç–æ-–ª–æ–≥–∏–Ω –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –Ω—É–∂–µ–Ω —Ä—É—á–Ω–æ–π –≤—Ö–æ–¥");
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", error);
      } finally {
        setLoading(false);
      }
    }

    init();
  }, [offset, viewedUserId]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç viewedUserId –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞

  async function loadSchedule(key: string, user: User | null) {
    try {
      const { mainWeek, nextWeek } = getCalendarWeeks(new Date());
      const weekDaysTemplate = offset === 1 ? nextWeek : mainWeek;

      const startDate = format(weekDaysTemplate[0].date, "yyyy-MM-dd");
      const endDate = format(
        new Date(weekDaysTemplate[6].date.getTime() + 24 * 60 * 60 * 1000),
        "yyyy-MM-dd"
      );

      const params: Record<string, string> = { start: startDate, end: endDate };
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á–µ–π userId –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const userIdForQuery = user?.isOwner ? viewedUserId : user?.id;
      if (userIdForQuery) {
        params.userId = String(userIdForQuery);
      }

      const qs = new URLSearchParams(params).toString();
      const url = `/api/shifts?${qs}`;

      const res = await fetch(url, {
        headers: { Authorization: `Bearer ${key}` },
      });
      if (!res.ok) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è");
        setWeekDays(weekDaysTemplate.map(d => ({ ...d, slots: [] }))); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–Ω–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        return;
      }

      const rows: Array<{
        id: number;
        user_id: number | null;
        shift_date: string;
        shift_code: string;
        status: string;
        username?: string | null;
      }> = await res.json();

      const days: Day[] = weekDaysTemplate.map((d) => ({
        ...d,
        slots: [],
      }));
      
      for (const r of rows) {
        // –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è –∏–∑ –¥–∞—Ç—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        const rowDateStr = r.shift_date.split('T')[0];
        const dayIndex = days.findIndex(
          (wd) => format(wd.date, "yyyy-MM-dd") === rowDateStr
        );
        if (dayIndex === -1) continue;

        const [startTime = "", endTime = ""] = r.shift_code?.split("-") ?? ["", ""];

        const slot: TimeSlot = {
          id: r.id,
          startTime,
          endTime,
          status: r.status as ShiftStatus,
          user_id: r.user_id,
          userName: r.username ?? null,
        };

        days[dayIndex].slots.push(slot);
      }

      days.forEach((d) => {
        d.slots.sort((a, b) => (a.startTime > b.startTime ? 1 : -1));
      });

      setWeekDays(days);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", error);
    }
  }

  if (loading) {
    return (
      <div className="flex min-h-screen items-center justify-center bg-black">
        <div className="text-white">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...</div>
      </div>
    );
  }

  if (!apiKey || !currentUser) {
    return (
      <div className="flex min-h-screen items-center justify-center bg-black">
        <div className="text-white">üîë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å</div>
      </div>
    );
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.
  // –í–ª–∞–¥–µ–ª–µ—Ü - —ç—Ç–æ —Ç–æ—Ç, —É –∫–æ–≥–æ –µ—Å—Ç—å —Ñ–ª–∞–≥ isOwner –≤ –ø—Ä–æ—Ñ–∏–ª–µ.
  const isOwner = currentUser?.isOwner ?? false;

  console.log("isOwner:", isOwner, "currentUser:", currentUser?.id, "viewedUserId:", viewedUserId);
  
  return (
    <ScheduleClientComponent
      initialWeekDays={weekDays}
      initialOffset={offset}
      currentUser={currentUser}
      isOwner={isOwner}
      apiKey={apiKey}
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–æ–ø viewedUserId, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç –¥–æ—á–µ—Ä–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
      viewedUserId={viewedUserId}
    />
  );
}